// Code generated by protoc-gen-gapi(github.com/xnzone/gapi/protoc-gen-gapi) version=v0.0.1). DO NOT EDIT.
// source: examples/greeter.proto

package greeter

import (
	"context"
	"net/http"

	"github.com/xnzone/gapi/client"
	"github.com/xnzone/gapi/server"
)

// Client API for Greeter service

type GreeterService interface {
	// Hello
	Hello(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type greeterService struct {
	addr string // request addr, begin with http or https
	c    client.Client
}

// NewGreeterService
func NewGreeterService(addr string, c client.Client) GreeterService {
	return &greeterService{
		addr: addr,
		c:    c,
	}
}
func (c *greeterService) Hello(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	var req *http.Request
	var err error

	req, err = client.BuildRequest(ctx, "POST", c.addr, "/hello", in, in.Body)

	if err != nil {
		return nil, err
	}
	out := new(Response)
	if err = client.Call(ctx, c.c, req, out, opts...); err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Greeter service

type GreeterHandler interface {
	// Hello
	Hello(ctx context.Context, in *Request, out *Response) error
}

func RegisterGreeterHandler(srv server.Server, hdlr GreeterHandler) {
	srv.Resolve("POST", "/hello", helloHandle(srv, hdlr))

}
func helloHandle(srv server.Server, hdlr GreeterHandler) func(ctx context.Context) {
	fn := func(ctx context.Context, in interface{}, out interface{}) error {
		req := in.(*Request)
		res := out.(*Response)
		return hdlr.Hello(ctx, req, res)
	}
	in, out := new(Request), new(Response)
	return server.Handle(srv, fn, in, out)
}
